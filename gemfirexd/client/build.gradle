dependencies {
  compile project(subprojectBase + 'gemfirexd:shared')
}

task generatePropertiesFiles(dependsOn: 'processResources') {
  def infoDir = file("${buildDir}/resources/main/com/pivotal/gemfirexd/internal/info")
  outputs.files "${infoDir}/dnc.properties", "${infoDir}/thrift.properties"
  inputs.dir compileJava.destinationDir

  doLast {
    println('Creating DRDA client properties')
    derbyProps.put('gemfirexd.product.technology.name', "${DERBY_NAME} Network Client")
    derbyProps.put('gemfirexd.product.file', "gemfirexd-client.jar")
    writeProperties(infoDir, 'dnc.properties', COPYRIGHT, derbyProps)

    println('Creating Thrift client properties')
    writeProperties(infoDir, 'thrift.properties', COPYRIGHT, [
        'gemfirexd.version.major'           : PRODUCT_MAJOR,
        'gemfirexd.version.minor'           : PRODUCT_MINOR,
        'gemfirexd.version.maint'           : PRODUCT_MAINT,
        'gemfirexd.build.number'            : '1',
        'gemfirexd.product.technology.name' : "${PRODUCT_NAME} Thrift Server",
        'gemfirexd.product.external.name'   : PRODUCT_NAME,
        'gemfirexd.product.external.version': PRODUCT_VERSION,
        'gemfirexd.version.beta'            : 'true',
        'gemfirexd.product.vendor'          : PRODUCT_VENDOR,
        'gemfirexd.product.file'            : 'gemfirexd-client.jar'])
  }
}

compileJava {
  dependsOn project(subprojectBase + 'gemfirexd:core').jar
  dependsOn generatePropertiesFiles
}

jar {
  baseName = 'gemfirexd-client'

  from {
    configurations.runtime.collect {
      it.isDirectory() ? it : zipTree(it).matching {
        exclude {
          it.path.contains('META-INF')
        }
      }
    }
  }

  manifest {
    attributes = getManifest('gemfirexdclient', '*',
        'com.pivotal.gemfirexd.jdbc', [])
  }

  doFirst {
    generateCommonManifest(projectDir, buildDir)
  }
}
