apply plugin: 'wrapper'

if (rootProject.hasProperty('native')) {

  apply plugin: 'cpp'

  buildRoot = buildRoot.trim()
  def osDir = System.properties['os.name'].toLowerCase()
  if (!buildRoot.isEmpty()) {
    buildDir = new File(buildRoot, osDir + '/' +  project.path.replace(':', '/'))
  } else {
    buildDir = 'build-artifacts/' + osDir
  }

  // C++/ODBC clients
  model {
    components {
      gfxdclient(NativeLibrarySpec) {
        binaries.all {
          // Define toolchain-specific compiler and linker options
          if (toolChain in Gcc) {
            cppCompiler.args '-I', "${projectDir}/src/gfxdclient/headers/thrift",
                '-I', '/gcm/where/cplusplus/thrift/linux64/4.8.3/include'
            if (buildType == buildTypes.debug) {
              cppCompiler.args '-g3', '-O0'
              linker.args '-L', '/gcm/where/cplusplus/thrift/linux64/4.8.3/debug/lib',
                  '-L', '/gcm/where/cplusplus/thrift/linux64/4.8.3/lib',
                  '-L', '/gcm/where/cplusplus/boost/linux64/4.8.3/debug/lib',
                  '-L', '/gcm/where/cplusplus/boost/linux64/4.8.3/lib',
                  '-L', '/gcm/where/cplusplus/gcc/linux64/deps/debug/lib',
                  '-L', '/gcm/where/cplusplus/gcc/linux64/deps/lib'
            } else {
              cppCompiler.define 'NDEBUG'
              cppCompiler.args '-O3'
              linker.args '-L', '/gcm/where/cplusplus/thrift/linux64/4.8.3/lib',
                  '-L', '/gcm/where/cplusplus/boost/linux64/4.8.3/lib',
                  '-L', '/gcm/where/cplusplus/gcc/linux64/deps/lib'
            }

            linker.args '-Wl,-Bstatic', '-lthrift', '-lboost_system',
                '-lboost_chrono', '-lboost_thread', '-lboost_log',
                '-lboost_log_setup', '-lboost_filesystem', '-lboost_date_time',
                '-Wl,-Bdynamic', '-lcrypto', '-lssl', '-lgmp', '-lpthread'
          }
        }
      }

      gfxdodbc(NativeLibrarySpec) {
        sources {
          cpp.lib library: 'gfxdclient', linkage: 'static'
        }
      }
    }
    buildTypes {
      debug
      release
    }
    platforms {
      x64 {
        architecture "x86_64"
      }
    }

    binaries {
      all {
        // Define toolchain-specific compiler and linker options
        if (toolChain in Gcc) {
          cppCompiler.args '-Wall', '-Wno-unused-local-typedefs', '-DPIC', '-fPIC',
            '-std=c++11', '-I', '/usr/include/x86_64-linux-gnu',
            '-I', '/gcm/where/cplusplus/boost/linux64/4.8.3/include',
            '-I', '/gcm/where/cplusplus/gcc/linux64/deps/include'
              if (buildType == buildTypes.debug) {
                cppCompiler.args '-g3', '-O0'
              } else {
                cppCompiler.define 'NDEBUG'
                  cppCompiler.args '-O3'
              }

          linker.args '-rdynamic', '-B/usr/lib/x86_64-linux-gnu', '-ldl'
        } else if (toolChain in VisualCpp) {
          if (buildType == buildTypes.debug) {
            cppCompiler.args '/Zi'
              linker.args '/DEBUG'
          } else {
            cppCompiler.args '/Zi'
          }
        }
      }
    }
  }
}
